//
//  Level.m
//  simpl
//
//  Created by Edward Oakenfold on 2013-03-13.
//  Copyright (c) 2013 Edward Oakenfold. All rights reserved.
//

#import "Level.h"
#import "LevelEvent.h"
#import "LevelInfo.h"
#import "PlayerMovedEvent.h"
#import "BlockMovedEvent.h"
#import "WinTileUnlockedEvent.h"

// all levels should have a buffer of two empty spaces
// this way, a player can travel to the edge of the map, go from vertical to horizontal (occupying 2 spaces) and not cause array out of bounds exceptions
// this also allows us to perform out of bounds animations
static unsigned char _blocks1[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,11,11,11,10,10,10,10,10,10,10,10,10,10,
    10,10,11,11,11,11,11,11,11,11,10,10,10,10,10,
    10,10,11,10,10,11,11,10,11,11,10,10,10,10,10,
    10,10,51,10,10,11,11,10,11,11,11,10,10,10,10,
    10,10,10,10,10,11,11,11,11,11,11,11,10,10,10,
    10,10,10,10,10,14,11,10,11,10,11,11,10,10,10,
    10,10,10,10,10,11,11,11,11,11,11,11,10,10,10,
    10,10,10,11,11,11,11,10,11,10,10,10,10,10,10,
    10,10,10,11,11,11,11,11,11,10,11,11,11,10,10,
    10,10,10,11,10,10,11,11,11,50,11,52,11,10,10,
    10,10,10,11,11,11,11,10,53,10,11,11,12,10,10,
    10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
};

static unsigned char _blocks2[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 51, 10, 10, 11, 11, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 10, 11, 14, 11, 10, 10,
    10, 10, 10, 10, 11, 10, 10, 10, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 11, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 50, 11, 11, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 11, 11, 11, 11, 12, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _blocks4[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,11,11,11,10,10,10,10,10,10,10,
    10,10,10,11,11,11,11,11,11,10,10,10,10,
    10,10,10,11,11,11,12,11,11,10,10,10,10,
    10,10,10,11,11,10,50,10,11,10,10,10,10,
    10,10,14,11,11,11,11,10,11,10,10,10,10,
    10,10,10,11,11,51,10,11,11,11,10,10,10,
    10,10,10,11,10,10,53,11,11,11,11,10,10,
    10,10,10,11,10,11,52,11,11,11,11,10,10,
    10,10,10,11,11,11,10,11,11,11,10,10,10,
    10,10,10,11,11,11,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10
};

static unsigned char _blocks5[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,11,11,11,11,51,10,10,10,10,
    10,10,10,11,11,11,11,11,10,10,10,10,
    10,10,10,11,10,10,11,12,10,10,10,10,
    10,10,10,11,11,11,11,11,10,10,10,10,
    10,10,10,10,11,10,11,11,11,10,10,10,
    10,10,10,14,11,11,10,11,11,11,10,10,
    10,10,10,10,11,11,11,10,11,11,10,10,
    10,10,11,11,50,11,11,11,11,11,10,10,
    10,10,11,11,11,10,11,11,11,10,10,10,
    10,10,11,11,11,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10
};

static unsigned char _blocks6[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,11,11,11,10,10,10,10,10,10,
    10,10,10,11,11,11,11,11,10,10,10,10,
    10,10,10,10,11,11,11,11,11,11,10,10,
    10,10,10,10,11,10,50,10,11,11,10,10,
    10,10,10,10,11,11,11,11,11,11,10,10,
    10,10,10,10,11,11,11,12,10,10,10,10,
    10,10,10,11,11,11,10,11,10,10,10,10,
    10,10,10,11,11,11,11,11,11,10,10,10,
    10,10,11,11,11,10,14,11,11,10,10,10,
    10,10,11,11,11,10,51,11,11,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10
};

static unsigned char _breakable1[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 11, 11, 22, 11, 22, 11, 22, 11, 10, 10,
    10, 10, 11, 22, 22, 10, 10, 10, 10, 11, 11, 10, 10,
    10, 10, 22, 22, 22, 11, 10, 10, 11, 11, 11, 10, 10,
    10, 10, 11, 10, 11, 22, 11, 12, 22, 13, 22, 10, 10,
    10, 10, 11, 22, 11, 11, 22, 10, 11, 10, 11, 10, 10,
    10, 10, 11, 11, 10, 10, 11, 22, 11, 22, 11, 10, 10,
    10, 10, 11, 22, 11, 11, 11, 22, 22, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 10, 10, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
};

static unsigned char _breakable2[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,
    10,10,22,11,22,22,11,10,10,10,10,
    10,10,11,22,22,11,11,13,10,10,10,
    10,10,22,11,11,10,11,11,11,10,10,
    10,10,10,11,10,11,22,11,22,10,10,
    10,10,10,11,22,22,10,22,22,10,10,
    10,10,10,11,22,22,10,11,10,10,10,
    10,10,10,11,10,10,22,11,10,10,10,
    10,10,10,11,11,11,12,22,22,10,10,
    10,10,10,10,10,10,11,22,22,10,10
};

static unsigned char _breakable3[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,12,10,10,
    10,10,13,11,11,10,11,11,11,11,10,10,
    10,10,11,11,22,11,11,11,10,11,10,10,
    10,10,11,10,11,11,22,11,11,11,10,10,
    10,10,11,22,22,10,10,11,11,11,10,10,
    10,10,10,22,22,10,10,11,10,11,10,10,
    10,10,10,11,11,11,10,11,11,11,10,10,
    10,10,10,11,11,22,22,10,11,11,10,10,
    10,10,10,10,22,22,22,11,11,11,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10
};

static unsigned char _breakable4[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 11, 11, 22, 11, 10, 11, 10, 10,
    10, 10, 10, 11, 22, 11, 11, 10, 11, 11, 10, 10,
    10, 10, 10, 11, 11, 10, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 11, 11, 10, 10, 10,
    10, 10, 10, 11, 10, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 11, 10, 11, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 10, 11, 10, 10, 10, 10, 10, 10,
    10, 10, 12, 11, 11, 11, 11, 11, 11, 13, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _breakable5[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,12,13,11,11,11,10,11,11,11,11,10,10,
    10,10,10,11,11,10,11,11,11,10,11,11,10,10,
    10,10,10,11,11,11,11,11,11,10,11,11,10,10,
    10,10,10,11,10,11,10,11,22,11,22,11,10,10,
    10,10,10,11,11,11,11,10,22,11,11,11,10,10,
    10,10,10,10,11,11,11,22,10,11,11,10,10,10,
    10,10,10,11,11,11,11,11,22,11,11,11,10,10,
    10,10,10,11,10,10,10,11,10,11,10,11,10,10,
    10,10,10,11,11,11,11,11,11,22,11,11,10,10,
    10,10,10,11,11,11,11,22,11,22,11,11,10,10,
    10,10,10,11,11,10,10,11,11,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,10
};


static unsigned char _breakable6[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 11, 11, 10, 11, 11, 11, 10, 11, 10, 10,
    10, 10, 10, 10, 11, 10, 10, 11, 10, 11, 10, 11, 10, 10,
    10, 10, 10, 10, 11, 10, 10, 11, 11, 11, 10, 11, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 10, 11, 10, 10,
    10, 10, 12, 11, 11, 10, 11, 10, 11, 10, 11, 11, 10, 10,
    10, 10, 10, 11, 22, 11, 22, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 10, 11, 10, 10, 11, 10, 10,
    10, 10, 13, 10, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

// TODO: encode animated solutions. an array of north/south/east/west directions

static unsigned char _breakable7[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 22, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 10, 11, 11, 10, 10, 11, 11, 10, 10,
    10, 10, 10, 11, 11, 11, 10, 11, 11, 11, 22, 11, 10, 10,
    10, 10, 11, 22, 10, 22, 22, 11, 11, 11, 10, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 10, 11, 11, 10, 11, 10, 10,
    10, 10, 11, 11, 10, 11, 11, 22, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 22, 11, 11, 10, 11, 11, 11, 10, 11, 10, 10,
    10, 10, 11, 10, 11, 11, 11, 11, 10, 12, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 22, 11, 22, 11, 11, 11, 11, 10, 10,
    10, 10, 13, 11, 10, 11, 11, 10, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _breakable8[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 22, 22, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 22, 22, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 11, 22, 22, 11, 22, 22, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 22, 10, 10, 10, 10,
    10, 10, 10, 10, 11, 22, 10, 10, 10, 10, 10, 10, 22, 10, 10, 10, 10,
    10, 10, 10, 22, 22, 22, 22, 22, 10, 10, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 11, 22, 11, 11, 22, 22, 10, 10, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 10, 10, 22, 22, 11, 10, 10, 10, 10, 10, 22, 22, 10, 10,
    10, 10, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 22, 22, 10, 10,
    10, 10, 11, 11, 22, 22, 22, 22, 10, 10, 10, 10, 10, 22, 22, 10, 10,
    10, 10, 11, 11, 22, 22, 22, 22, 22, 11, 10, 10, 11, 12, 11, 10, 10,
    10, 10, 11, 11, 11, 10, 10, 11, 13, 11, 10, 10, 11, 11, 10, 10, 10,
    10, 10, 11, 11, 11, 10, 10, 11, 22, 11, 10, 10, 11, 11, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _breakable10[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 22, 22, 11, 10, 11, 11, 11, 10, 10,
    10, 10, 11, 13, 11, 22, 22, 11, 11, 11, 22, 11, 10, 10,
    10, 10, 11, 11, 11, 10, 10, 11, 10, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 10, 22, 22, 11, 11, 11, 10, 10, 10,
    10, 10, 11, 22, 22, 11, 22, 22, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 22, 11, 10, 10, 22, 22, 11, 10, 10,
    10, 10, 11, 11, 10, 10, 10, 10, 10, 11, 12, 22, 10, 10,
    10, 10, 11, 22, 11, 22, 22, 11, 22, 22, 22, 11, 10, 10,
    10, 10, 11, 11, 11, 22, 22, 10, 22, 22, 11, 22, 10, 10,
    10, 10, 11, 22, 22, 22, 10, 10, 10, 11, 22, 11, 10, 10,
    10, 10, 10, 22, 22, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _breakable11[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 22, 22, 10, 10, 10,
    10, 10, 10, 10, 22, 22, 22, 22, 22, 10, 10, 10,
    10, 10, 10, 10, 22, 22, 22, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 11, 10, 12, 22, 22, 11, 10, 10,
    10, 10, 11, 22, 22, 10, 13, 10, 22, 22, 10, 10,
    10, 10, 22, 11, 22, 22, 22, 10, 22, 11, 10, 10,
    10, 10, 22, 11, 22, 22, 22, 11, 22, 11, 10, 10,
    10, 10, 10, 22, 22, 10, 22, 22, 22, 22, 10, 10,
    10, 10, 10, 11, 22, 10, 22, 22, 10, 11, 10, 10,
    10, 10, 22, 22, 22, 22, 11, 22, 22, 22, 10, 10,
    10, 10, 11, 22, 22, 22, 22, 22, 22, 22, 10, 10,
    10, 10, 22, 22, 22, 22, 22, 22, 10, 10, 10, 10,
    10, 10, 22, 22, 22, 22, 22, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 22, 22, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _breakable12[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 22, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 22, 22, 11, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 11, 11, 11, 22, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 13, 11, 11, 22, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 22, 11, 10, 11, 11, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 22, 11, 22, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 22, 10, 11, 11, 10, 10, 11, 11, 11, 11, 10, 10, 10,
    10, 10, 11, 10, 22, 11, 10, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 22, 22, 11, 22, 22, 11, 11, 10, 11, 11, 11, 10, 10,
    10, 10, 22, 22, 22, 22, 10, 12, 11, 11, 11, 11, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _breakable14[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 22, 10, 10, 10, 11, 10, 10,
    10, 10, 11, 11, 10, 10, 11, 11, 10, 10, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 11, 10, 11, 11, 11, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 11, 10, 11, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 12, 10, 13, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _breakable15[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,11,11,11,11,10,10,10,10,10,10,
    10,10,10,10,11,10,10,11,10,10,10,10,10,10,
    10,10,10,11,11,11,11,11,11,10,10,10,10,10,
    10,10,11,11,11,11,10,11,11,11,11,11,10,10,
    10,10,11,11,11,10,10,10,10,10,11,11,10,10,
    10,10,12,10,11,11,11,10,11,22,11,11,10,10,
    10,10,10,10,11,11,11,10,11,11,10,11,10,10,
    10,10,10,10,10,10,11,11,11,11,10,11,10,10,
    10,10,10,10,10,10,10,11,11,10,13,11,10,10,
    10,10,10,10,10,10,10,11,11,11,11,11,10,10,
    10,10,10,10,10,10,10,10,10,10,11,11,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,10
};

static unsigned char _easy2[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 10, 13, 11, 11, 11, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 10, 11, 11, 11, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 10, 10, 11, 11, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 12, 11, 11, 11, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 11, 11, 11, 11, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _easy3[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,13,11,11,10,10,10,10,10,10,10,
    10,10,10,11,11,11,10,10,10,10,10,10,10,
    10,10,11,11,10,11,11,11,10,10,10,10,10,
    10,10,11,11,10,11,11,11,11,10,10,10,10,
    10,10,11,11,11,11,11,10,11,10,10,10,10,
    10,10,10,10,10,10,10,10,11,10,10,10,10,
    10,10,10,10,10,10,10,10,11,10,10,10,10,
    10,10,10,10,10,10,10,10,11,11,12,10,10,
    10,10,10,10,10,10,10,11,11,11,10,10,10,
    10,10,10,10,11,11,11,11,11,11,10,10,10,
    10,10,10,10,11,11,11,11,10,10,10,10,10,
    10,10,10,10,11,11,11,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10
};

static unsigned char _easy4[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 11, 13, 12, 10, 10,
    10, 10, 10, 11, 11, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 11, 10, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11 ,10, 11, 10, 10,
    10, 10, 11, 10, 11, 11, 11, 10, 10,
    10, 10, 11, 10, 10, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _easy5[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,11,11,10,11,11,10,10,10,
    10,10,10,11,11,10,11,11,10,10,10,
    10,10,11,11,11,11,11,11,10,10,10,
    10,10,11,11,10,10,11,10,10,10,10,
    10,10,11,11,12,11,11,11,11,10,10,
    10,10,11,10,10,10,11,11,11,10,10,
    10,10,11,11,13,10,10,11,11,10,10,
    10,10,11,11,10,10,11,11,11,10,10,
    10,10,11,11,11,11,11,10,10,10,10,
    10,10,11,10,11,11,11,10,10,10,10,
    10,10,11,11,11,11,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10
};

static unsigned char _easy6[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 10, 13, 11, 11, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 10, 11, 11, 11, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 10, 10, 10, 10, 10, 11, 11, 12, 10, 10,
    10, 10, 11, 11, 11, 10, 10, 10, 10, 11, 11, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 10, 10, 10, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 11, 10, 10, 10, 10, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 11, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _easy7[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,12,11,11,10,10,10,10,10,
    10,10,10,11,11,13,11,11,10,10,10,10,
    10,10,11,11,11,10,11,11,11,10,10,10,
    10,10,11,10,11,11,10,11,11,11,10,10,
    10,10,11,10,11,11,11,11,11,11,10,10,
    10,10,11,11,11,11,11,10,11,11,10,10,
    10,10,10,11,11,10,11,10,11,11,10,10,
    10,10,10,10,11,11,11,11,11,11,10,10,
    10,10,10,10,11,11,11,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10
};

static unsigned char _easy8[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 11, 11, 11, 11, 11, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 10, 11, 11, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 10, 11, 10, 11, 10, 11, 10, 10,
    10, 10, 11, 11, 10, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 11, 10, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 11, 12, 13, 11, 11, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 10, 11, 10, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 11, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _easy9[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,12,11,11,10,10,10,
    10,10,10,10,10,10,10,10,10,11,11,10,10,10,
    10,10,10,10,11,11,11,11,11,11,11,10,10,10,
    10,10,10,11,11,11,10,11,11,11,11,10,10,10,
    10,10,11,11,11,11,11,11,10,11,11,10,10,10,
    10,10,11,11,10,11,11,11,11,11,11,10,10,10,
    10,10,11,11,10,10,11,10,10,10,10,10,10,10,
    10,10,11,11,10,11,11,11,13,11,10,10,10,10,
    10,10,11,11,11,11,11,10,10,11,10,10,10,10,
    10,10,10,10,10,11,11,11,11,11,11,11,10,10,
    10,10,10,10,10,10,10,10,10,11,11,11,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,10
};

static unsigned char _easy10[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,
    10,10,11,11,11,11,10,10,10,10,10,
    10,10,11,10,11,11,11,11,10,10,10,
    10,10,11,10,11,11,11,11,10,10,10,
    10,10,11,11,11,11,10,11,10,10,10,
    10,10,10,10,11,11,11,11,10,10,10,
    10,10,10,10,10,11,11,11,10,10,10,
    10,10,10,11,11,11,12,10,10,10,10,
    10,10,10,11,11,10,11,10,13,10,10,
    10,10,10,11,11,11,11,11,11,10,10,
    10,10,10,10,10,10,11,11,11,10,10,
    10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10
};

static unsigned char _easy11[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,11,11,11,10,10,10,10,10,10,10,
    10,10,11,11,11,11,11,11,10,10,10,10,
    10,10,10,10,11,11,11,11,10,10,10,10,
    10,10,10,10,10,10,11,11,10,10,10,10,
    10,10,10,10,10,10,11,11,11,11,10,10,
    10,10,10,10,10,10,11,10,10,11,10,10,
    10,10,10,10,11,11,13,12,10,11,10,10,
    10,10,10,10,11,10,10,10,11,11,10,10,
    10,10,10,10,11,11,11,11,11,11,10,10,
    10,10,10,10,11,11,11,11,11,11,10,10,
    10,10,10,10,10,10,11,11,11,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10
};

static unsigned char _easy12[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,11,11,11,10,10,10,10,
    10,10,10,11,11,11,11,10,10,10,10,
    10,10,10,11,11,11,10,10,10,10,10,
    10,10,11,11,11,10,10,11,11,10,10,
    10,10,11,11,11,10,10,11,11,10,10,
    10,10,11,10,11,11,11,11,11,10,10,
    10,10,11,10,10,10,11,11,10,10,10,
    10,10,13,10,10,10,11,11,10,10,10,
    10,10,10,10,11,11,11,11,10,10,10,
    10,10,10,10,11,11,10,10,10,10,10,
    10,10,10,10,11,11,11,11,10,10,10,
    10,10,10,10,10,11,11,12,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10
};

static unsigned char _easy13[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 10, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 10, 11, 10, 10, 10, 11, 10, 10, 10, 10,
    10, 10, 13, 11, 11, 11, 11, 11, 11, 11, 12, 10, 10,
    10, 10, 11, 10, 10, 10, 10, 11, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 11, 11, 11, 11, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _easy14[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 11, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 11, 10, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 11, 10, 11, 11, 10, 10,
    10, 10, 13, 10, 10, 11, 10, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10,
    10, 10, 11, 10, 11, 11, 11, 10, 11, 11, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 10, 10, 11, 10, 10, 10, 10,
    10, 10, 12, 10, 11, 11, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _easy15[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,11,11,11,11,11,11,11,10,10,
    10,10,10,11,11,11,11,11,11,10,11,10,10,
    10,10,11,11,10,11,11,10,11,10,11,10,10,
    10,10,11,11,10,10,10,11,11,10,11,10,10,
    10,10,13,10,10,10,11,11,11,11,11,10,10,
    10,10,10,11,11,11,11,11,10,11,11,10,10,
    10,10,10,11,11,11,10,11,11,11,10,10,10,
    10,10,10,10,11,11,11,11,12,11,10,10,10,
    10,10,10,10,11,11,10,11,11,10,10,10,10,
    10,10,10,10,11,11,11,11,11,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10
};      

static unsigned char _easy16[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 13, 10, 10, 10, 10,
    10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 11, 10, 10, 10,
    10, 10, 11, 11, 11, 10, 11, 11, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 10, 10, 10, 11, 11, 10, 10,
    10, 10, 10, 11, 11, 10, 10, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 12, 10, 10, 10, 10,
    10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _easy17[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 10, 10, 10,
    10, 10, 11, 11, 10, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 10, 11, 11, 10, 10,
    10, 10, 10, 10, 11, 10, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 10, 11, 10, 10, 10,
    10, 10, 11, 11, 11, 10, 11, 10, 10, 10,
    10, 10, 13, 10, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 10, 10, 10,
    10, 10, 12, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _easy18[] = {
    
    10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,11,11,11,12,10,10,
    10,10,11,11,11,11,11,11,10,10,
    10,10,11,11,11,10,11,11,10,10,
    10,10,11,11,10,10,10,10,10,10,
    10,10,11,10,10,10,10,13,10,10,
    10,10,11,11,11,11,11,11,10,10,
    10,10,10,10,11,11,10,11,10,10,
    10,10,10,10,11,11,11,11,10,10,
    10,10,10,10,10,11,11,11,10,10,
    10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10
};

static unsigned char _easy19[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 11, 10, 10, 10, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 11, 10, 11, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 10, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 10, 11, 11, 11, 11, 12, 11, 10, 10,
    10, 10, 11, 11, 10, 11, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 13, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _easy20[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,11,11,11,11,11,10,10,10,
    10,10,11,11,11,11,11,11,11,11,10,10,10,
    10,10,11,10,10,11,11,10,11,11,10,10,10,
    10,10,11,11,11,11,11,10,11,11,10,10,10,
    10,10,11,11,11,11,10,11,11,11,10,10,10,
    10,10,11,11,10,11,11,11,11,10,10,10,10,
    10,10,10,11,10,10,11,11,11,11,11,10,10,
    10,10,10,11,10,10,11,11,10,11,11,10,10,
    10,10,10,13,10,10,11,11,10,11,11,10,10,
    10,10,10,12,11,11,11,11,11,11,11,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10
};

static unsigned char _easy21[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 11, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 11, 10, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 13, 11, 11, 11, 10, 11, 11, 11, 10, 10,
    10, 10, 10, 11, 11, 10, 10, 11, 10, 11, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 12, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _easy22[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 12, 11, 10, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 10, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 13, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _easy23[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 10, 10, 10, 10,
    10, 10, 11, 11, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 11, 11, 10, 10,
    10, 10, 10, 11, 11, 12, 10, 10,
    10, 10, 10, 11, 13, 10, 10, 10,
    10, 10, 10, 11, 11, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
};

static unsigned char _easy25[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,11,11,10,10,10,10,10,10,
    10,10,10,11,11,11,12,10,10,10,10,10,
    10,10,10,11,11,11,10,11,11,10,10,10,
    10,10,10,11,11,10,11,11,13,11,10,10,
    10,10,11,11,11,10,11,11,11,11,10,10,
    10,10,11,10,10,10,10,11,10,11,10,10,
    10,10,11,11,11,11,11,11,11,11,10,10,
    10,10,11,11,11,10,11,10,11,11,10,10,
    10,10,10,11,11,10,11,11,11,11,10,10,
    10,10,10,11,11,11,11,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10
};

static unsigned char _easy26[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 10, 10, 10, 10, 10, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 10, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 11, 11, 11, 10, 11, 11, 10, 10, 10,
    10, 10, 10, 11, 11, 10, 11, 10, 11, 11, 13, 10, 10,
    10, 10, 10, 11, 11, 10, 11, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 10, 10, 11, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 12, 11, 11, 11, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _level1[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,11,11,11,11,11,11,11,11,10,10,
    10,10,11,11,11,11,11,10,11,11,10,10,
    10,10,11,10,10,10,11,11,11,11,10,10,
    10,10,11,11,11,13,10,11,11,11,10,10,
    10,10,11,10,11,12,10,11,11,11,10,10,
    10,10,11,10,11,11,11,10,11,11,10,10,
    10,10,11,10,11,11,11,10,11,11,10,10,
    10,10,11,10,10,10,11,11,11,11,10,10,
    10,10,11,11,11,11,11,11,10,10,10,10,
    10,10,10,10,10,11,11,11,10,10,10,10,
    10,10,10,10,10,11,11,11,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10
};

static unsigned char _level2[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 10, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 10, 11, 11, 11, 11, 13, 10, 10, 11, 11, 11, 10, 10,
    10, 10, 11, 10, 11, 11, 11, 10, 11, 11, 11, 11, 11, 10, 10, 10,
    10, 10, 11, 10, 10, 10, 11, 10, 11, 10, 11, 11, 10, 10, 10, 10,
    10, 10, 11, 11, 10, 10, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 10, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 10, 11, 11, 11, 11, 10, 10, 10, 10, 10,
    10, 10, 11, 10, 11, 11, 11, 11, 11, 11, 12, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 10, 11, 11, 11, 11, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _level3[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10,
    10, 10, 11, 11, 10, 10, 11, 11, 11, 10, 10, 10,
    10, 10, 11, 11, 10, 10, 10, 10, 11, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 10, 11, 11, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 10, 12, 13, 11, 10, 10,
    10, 10, 11, 11, 10, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 10, 10, 11, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _level4[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 10, 11, 11, 10, 10, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 13, 11, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 11, 10, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 10, 10, 11, 11, 11, 10, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 10, 12, 11, 11, 10, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 10, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _level5[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,11,11,11,13,11,11,10,10,
    10,10,11,11,11,10,11,11,11,11,10,10,
    10,10,11,11,11,10,11,10,11,10,10,10,
    10,10,11,10,11,11,11,11,11,11,10,10,
    10,10,11,10,11,11,11,10,10,11,10,10,
    10,10,11,11,11,11,10,11,11,11,10,10,
    10,10,11,11,10,10,10,11,11,12,10,10,
    10,10,10,11,10,11,11,11,10,11,10,10,
    10,10,10,11,11,11,11,11,11,11,10,10,
    10,10,10,11,11,11,11,11,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10
    
};

static unsigned char _level6[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 13, 11, 11, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 11, 10, 10, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 11, 11, 10, 11, 10, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 10, 10, 11, 10, 11, 10, 10,
    10, 10, 10, 11, 10, 10, 11, 11, 10, 11, 10, 10,
    10, 10, 11, 11, 10, 10, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 10, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 10, 11, 10, 11, 11, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _level7[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 10, 10, 10,
    10, 10, 11, 11, 11, 10, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 11, 11, 10, 11, 10, 11, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 10, 11, 10, 10,
    10, 10, 10, 11, 10, 11, 11, 11, 12, 10, 10,
    10, 10, 11, 13, 11, 11, 10, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _level8[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10,
    10, 10, 11, 10, 11, 11, 11, 10, 10, 11, 11, 10, 10, 10,
    10, 10, 11, 11, 11, 10, 12, 10, 11, 11, 11, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 10, 11, 11, 10, 11, 10, 10, 10,
    10, 10, 10, 10, 10, 13, 11, 11, 11, 11, 11, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 10, 11, 11, 10, 11, 11, 10, 10,
    10, 10, 11, 10, 10, 11, 11, 11, 10, 10, 11, 11, 10, 10,
    10, 10, 11, 11, 10, 11, 11, 11, 10, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 10, 11, 10, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _level9[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,11,11,11,10,10,
    10,10,10,10,10,10,10,10,11,11,11,10,10,
    10,10,11,11,11,11,10,10,11,10,11,10,10,
    10,10,11,11,11,11,11,11,11,10,11,10,10,
    10,10,11,10,10,11,10,10,11,11,11,10,10,
    10,10,11,11,11,11,11,11,11,11,11,10,10,
    10,10,11,11,10,11,10,10,12,10,10,10,10,
    10,10,11,11,11,11,10,10,10,10,10,10,10,
    10,10,10,10,11,11,10,10,10,10,10,10,10,
    10,10,10,13,11,11,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10
};

static unsigned char _level10[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 13, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 11, 11, 11, 10, 10, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 11, 10, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 12, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _level11[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 11, 11, 10, 11, 11, 10, 10,
    10, 10, 13, 11, 11, 10, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 11, 10, 11, 11, 10, 10,
    10, 10, 10, 11, 11, 10, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 11, 11, 11, 10, 11, 10, 11, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 11, 11, 11, 10, 11, 11, 12, 11, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _level12[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 10, 11, 10, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 11, 11, 10, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 12, 10, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 10, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 10, 11, 11, 10, 11, 11, 10, 13, 10, 10,
    10, 10, 11, 10, 11, 10, 10, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 10, 11, 10, 10, 10, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _level13[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 10, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 10, 10, 11, 11, 10, 11, 10, 13, 11, 11, 11, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 11, 10, 11, 10, 10, 10, 11, 11, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 10, 11, 10, 11, 11, 11, 11, 11, 11, 10, 10, 10,
    10, 10, 10, 11, 10, 11, 11, 11, 11, 11, 11, 11, 10, 11, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 10, 11, 10, 10, 11, 11, 11, 10, 10, 10,
    10, 10, 11, 11, 10, 11, 10, 11, 10, 11, 10, 10, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 10, 10,
    10, 10, 10, 11, 10, 12, 10, 10, 11, 10, 11, 10, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 11, 11, 10, 10, 10, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _level14[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,11,11,11,11,11,11,10,10,10,
    10,10,11,11,11,11,10,11,11,10,10,10,
    10,10,11,11,10,11,10,11,13,10,10,10,
    10,10,11,11,11,11,10,11,12,10,10,10,
    10,10,10,10,11,11,10,11,11,11,10,10,
    10,10,11,11,11,11,10,11,11,11,10,10,
    10,10,11,11,10,10,10,10,11,10,10,10,
    10,10,11,11,11,11,11,11,11,10,10,10,
    10,10,10,11,11,11,10,11,11,10,10,10,
    10,10,10,10,11,11,11,11,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10
};

static unsigned char _level15[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,13,10,10,10,10,10,
    10,10,10,10,11,11,11,11,11,10,10,
    10,10,11,11,11,11,10,11,11,10,10,
    10,10,11,11,10,11,11,11,11,10,10,
    10,10,11,11,11,11,11,10,11,10,10,
    10,10,10,11,11,10,11,11,11,10,10,
    10,10,10,11,11,11,11,11,10,10,10,
    10,10,10,10,11,11,10,11,10,10,10,
    10,10,10,10,11,11,11,11,12,10,10,
    10,10,10,10,10,11,11,10,10,10,10,
    10,10,10,10,10,11,11,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10
};

static unsigned char _level16[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 10, 11, 11, 11, 10, 10, 10,
    10, 10, 11, 10, 11, 11, 11, 11, 11, 10, 11, 10, 10, 10,
    10, 10, 11, 11, 11, 10, 13, 11, 10, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 10, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 10, 10, 11, 11, 11, 10, 11, 10, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 10, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 10, 10, 11, 11, 11, 11, 12, 10, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 10, 10, 10, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _level17[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 11, 10, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 10, 11, 10, 10, 10, 10,
    10, 10, 13, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 11, 10, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 11, 11, 11, 10, 11, 10, 11, 11, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 10, 10, 10,
    10, 10, 10, 11, 10, 11, 11, 10, 11, 11, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _level18[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 10, 10, 11, 11, 13, 10, 10, 10,
    10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 11, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 10, 11, 10, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 11, 11, 10, 11, 10, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 10, 10, 11, 10, 10, 10, 10,
    10, 10, 11, 11, 10, 10, 11, 11, 11, 11, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 10, 10, 10, 10,
    10, 10, 10, 10, 11, 11, 10, 10, 10, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _level19[] = {

    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,11,11,11,11,11,11,10,10,10,10,
    10,10,11,10,10,10,11,11,10,10,10,10,
    10,10,11,11,11,11,11,11,11,11,10,10,
    10,10,11,10,11,11,11,11,11,12,10,10,
    10,10,11,10,11,10,11,11,10,13,10,10,
    10,10,11,10,11,11,11,11,11,10,10,10,
    10,10,11,11,11,11,10,11,11,10,10,10,
    10,10,10,10,10,11,11,11,11,11,10,10,
    10,10,10,10,10,11,11,10,11,11,10,10,
    10,10,10,10,10,11,11,11,11,11,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10
};

static unsigned char _trigger3_2[] = {
    
    10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,11,11,11,11,11,11,10,10,
    10,10,10,10,10,11,10,10,11,11,11,10,10,
    10,10,10,10,10,11,10,10,11,10,11,10,10,
    10,10,10,10,10,11,10,10,11,10,11,10,10,
    10,10,10,10,10,11,10,10,11,11,11,10,10,
    10,10,11,11,11,11,10,10,11,11,11,10,10,
    10,10,11,11,11,11,10,11,11,11,10,10,10,
    10,10,11,10,10,10,11,11,11,10,10,10,10,
    10,10,12,11,11,11,11,11,10,10,10,10,10,
    10,10,11,11,10,11,13,10,10,10,10,10,10,
    10,10,11,11,11,11,11,10,10,10,10,10,10,
    10,10,10,10,11,11,11,10,10,10,10,10,10,
    10,10,10,10,11,10,11,10,10,10,10,10,10,
    10,10,10,10,11,11,11,10,10,10,10,10,10,
    10,10,10,10,11,11,11,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10
};

static unsigned char _tut1[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 12, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 11, 10, 10,
    10, 10, 10, 10, 10, 11, 10, 10,
    10, 10, 13, 10, 10, 11, 10, 10,
    10, 10, 11, 10, 10, 11, 10, 10,
    10, 10, 11, 10, 10, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _tut2[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 12, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 11, 11, 11, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 11, 11, 10, 10,
    10, 10, 13, 11, 11, 10, 11, 11, 10, 10,
    10, 10, 10, 11, 11, 11, 10, 11, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _tut3[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 12, 13, 11, 11, 10, 10,
    10, 10, 10, 11, 10, 11, 10, 10,
    10, 10, 10, 11, 10, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 10, 10, 10, 10,
    10, 10, 11, 11, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _tut4[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 12, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 50, 11, 51, 10, 10,
    10, 10, 10, 10, 10, 11, 10, 10,
    10, 10, 10, 11, 11, 11, 10, 10,
    10, 10, 10, 11, 11, 11, 10, 10,
    10, 10, 10, 14, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10
};

static unsigned char _tut5[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 12, 10, 10, 10, 10, 10,
    10, 10, 10, 50, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 10, 10, 10, 10, 10,
    10, 10, 10, 11, 10, 14, 10, 10, 10,
    10, 10, 11, 11, 10, 11, 10, 10, 10,
    10, 10, 11, 11, 10, 11, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 51, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10
};

/*
static unsigned char _testingGround[] = {
    
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 12, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 13, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
};
*/

static unsigned char* _levels[] = {
    //_testingGround
    
     _tut1
    ,_tut2
    ,_tut3
    ,_easy23
    ,_easy22
   
    ,_easy6
    ,_easy2
    ,_easy18
    ,_easy4
    ,_easy3
    ,_easy11
    ,_easy12
    ,_easy21
    ,_easy25
    ,_easy16
    ,_easy17
    ,_easy19
    ,_easy15
    ,_easy5
    ,_easy7
    ,_easy8
    ,_easy9
    ,_easy10
    ,_easy13
    ,_easy14
    ,_easy20
    ,_easy26

    ,_breakable8
    ,_breakable11
    ,_breakable10
    ,_breakable4
    ,_breakable14
    ,_breakable15
    ,_breakable2
    ,_breakable3
    ,_breakable1
    ,_breakable12
    ,_breakable5
    ,_breakable6
    ,_breakable7
    
    ,_level1
    ,_level2
    ,_level3
    ,_level4
    ,_level5
    ,_level6
    ,_level7
    ,_level8
    ,_level9
    ,_level10
    ,_level11
    ,_level12
    ,_level13
    ,_level14
    ,_level15
    ,_level16
    ,_level17
    ,_level18
    ,_level19
    ,_trigger3_2
    
    ,_tut4
    ,_tut5
    ,_blocks2
    ,_blocks1
    ,_blocks4
    ,_blocks5
    ,_blocks6
};

static unsigned char _columns[] = {
    //12    // _testingGround
    
     8      // _tut1
    ,10     // _tut2
    ,8      // _tut3
    ,8      // _easy23
    ,10     // _easy22
    
    ,14     // _easy6
    ,13     // _easy2
    ,10     // _easy18
    ,9      // _easy4
    ,13     // _easy3
    ,12     // _easy11
    ,11     // _easy12
    ,12     // _easy21
    ,12     // _easy25
    ,11     // _easy16
    ,10     // _easy17
    ,13     // _easy19
    ,13     // _easy15
    ,11     // _easy5
    ,12     // _easy7
    ,12     // _easy8
    ,14     // _easy9
    ,11     // _easy10
    ,13     // _easy13
    ,13     // _easy14
    ,13     // _easy20
    ,13     // _easy26

    ,17     // _breakable8
    ,12     // _breakable11
    ,14     // _breakable10
    ,12     // _breakable4
    ,13     // _breakable14
    ,14     // _breakable15
    ,11     // _breakable2
    ,12     // _breakable3
    ,13     // _breakable1
    ,15     // _breakable12
    ,14     // _breakable5
    ,14     // _breakable6
    ,14     // _breakable7

    ,12     // _level1
    ,16     // _level2
    ,12     // _level3
    ,14     // _level4
    ,12     // _level5
    ,12     // _level6
    ,11     // _level7
    ,14     // _level8
    ,13     // _level9
    ,14     // _level10
    ,13     // _level11
    ,13     // _level12
    ,18     // _level13
    ,12     // _level14
    ,11     // _level15
    ,14     // _level16
    ,13     // _level17
    ,14     // _level18
    ,12     // _level19
    ,13     // _trigger3_2

    ,8      // _tut4
    ,9      // _tut5
    ,13     // _blocks2
    ,15     // _blocks1
    ,13     // _blocks4
    ,12     // _blocks5
    ,12     // _blocks6
};

static int _rows[] = {
     //14  // _testingGround
     
     11  // _tut1
    ,11  // _tut2
    ,10  // _tut3
    ,11  // _easy23
    ,13  // _easy22
    
    ,16  // _easy6
    ,13  // _easy2
    ,13  // _easy18
    ,13  // _easy4
    ,16  // _easy3
    ,15  // _easy11
    ,16  // _easy12
    ,13  // _easy21
    ,14  // _easy25
    ,14  // _easy16
    ,14  // _easy17
    ,13  // _easy19
    ,14  // _easy15
    ,15  // _easy5
    ,13  // _easy7
    ,14  // _easy8
    ,15  // _easy9
    ,14  // _easy10
    ,14  // _easy13
    ,13  // _easy14
    ,14  // _easy20
    ,14  // _easy26
 
    ,19  // _breakable8
    ,18  // _breakable11
    ,16  // _breakable10
    ,14  // _breakable4
    ,13  // _breakable14
    ,15  // _breakable15
    ,13  // _breakable2
    ,13  // _breakable3
    ,14  // _breakable1
    ,15  // _breakable12
    ,15  // _breakable5
    ,14  // _breakable6
    ,14  // _breakable7
    
    ,15  // _level1
    ,16  // _level2
    ,12  // _level3
    ,15  // _level4
    ,14  // _level5
    ,14  // _level6
    ,12  // _level7
    ,14  // _level8
    ,14  // _level9
    ,17  // _level10
    ,12  // _level11
    ,14  // _level12
    ,17  // _level13
    ,14  // _level14
    ,15  // _level15
    ,14  // _level16
    ,14  // _level17
    ,14  // _level18
    ,14  // _level19
    ,19  // _trigger3_2
    
    ,11  // _tut4
    ,11  // _tut5
    ,17  // _blocks2
    ,16  // _blocks1
    ,14  // _blocks4
    ,14  // _blocks5
    ,14  // _blocks6
};

// TODO: replace completely with cols*rows
static int _sizes[] = {
     //12*14  // _testingGround
     
     8*11   // _tut1
    ,10*11  // _tut2
    ,8*10   // _tut3
    ,8*11   // _easy23
    ,10*13  // _easy22
   
    ,14*16  // _easy6
    ,13*13  // _easy2
    ,10*13  // _easy18
    ,9*13   // _easy4
    ,13*16  // _easy3
    ,12*15  // _easy11
    ,11*16  // _easy12
    ,12*13  // _easy21
    ,12*14  // _easy25
    ,11*14  // _easy16
    ,10*14  // _easy17
    ,13*13  // _easy19
    ,13*14  // _easy15
    ,11*15  // _easy5
    ,12*13  // _easy7
    ,12*14  // _easy8
    ,14*15  // _easy9
    ,11*14  // _easy10
    ,13*14  // _easy13
    ,13*13  // _easy14
    ,13*14  // _easy20
    ,13*14  // _easy26
 
    ,17*19  // _breakable8
    ,12*18  // _breakable11
    ,14*16  // _breakable10
    ,12*14  // _breakable4
    ,13*13  // _breakable14
    ,14*15  // _breakable15
    ,11*13  // _breakable2
    ,12*13  // _breakable3
    ,13*14  // _breakable1
    ,15*15  // _breakable12
    ,14*15  // _breakable5
    ,14*14  // _breakable6
    ,14*14  // _breakable7
    
    ,12*15  // _level1
    ,16*16  // _level2
    ,12*12  // _level3
    ,14*15  // _level4
    ,12*14  // _level5
    ,12*14  // _level6
    ,11*12  // _level7
    ,14*14  // _level8
    ,13*14  // _level9
    ,14*17  // _level10
    ,13*12  // _level11
    ,13*14  // _level12
    ,18*17  // _level13
    ,12*14  // _level14
    ,11*15  // _level15
    ,14*14  // _level16
    ,13*14  // _level17
    ,14*14  // _level18
    ,12*14  // _level19
    ,13*19  // _trigger3_2
    
    ,8*11   // _tut4
    ,9*11   // _tut5
    ,13*17  // _blocks2
    ,15*16  // _blocks1
    ,13*14  // _blocks4
    ,12*14  // _blocks5
    ,12*14  // _blocks6
};

static int _moves[] = {
    
     //42 // _testingGround
     
     10 // _tut1
    ,13 // _tut2
    ,11 // _tut3
    ,18  // _easy23 - ulddluruululdrrdld
    ,21  // _easy22 - uldrdluruldrdrdrdldrd    
    
    ,46  // _easy6  - lddrdluuldrddllldlurdluululuruuurdrdlulurddrul
    ,35  // _easy2  - rdruldlululurdruldlurrrururuldrdlul
    ,28  // _easy18 - dluldldlurdlddrrdlurrddluruu
    ,28  // _easy4  - lldrdrdlldrurrddldlluuuuruur
    ,34  // _easy3  - ldldldluurrruluuulluuldrdrdlluurul
    ,37  // _easy11 - llddrurdlurddlurrruuullurulllurdrrddd
    ,29  // _easy12 - lulurdrdlulurruulluuurdlddldd
    ,15  // _easy21 - lululdrrdluluul
    ,43  // _easy25 - ldldruurdlddlddrurrrdrulllldrurruurdlurdlur
    ,33  // _easy16 - llurdlurdluuurrurddrullluldruuurr
    ,34  // _easy17 - rruruldruuurulullddrddlurddrululld
    ,27  // _easy19 - lluldrrrululullulddddlurrdd
    ,37  // _easy15 - lldlurrrulddllurulurruruululdruldldld
    ,21  // _easy5  - luurulddldddrrdluluur
    ,24  // _easy7  - rdrddllddrdluuurdlluurur
    ,23  // _easy8  - ddruluuuulldrurrrrddldl
    ,33  // _easy9  - rddlllddrullurdrdddrrrdluulldlurr
    ,19  // _easy10 - lldruruulurddrddrru
    ,39  // _easy13 - llddluldrulluuurrrrurulddrruldrulddllll
    ,28  // _easy14 - uurrdlurdldruuuuurdlddddlluu
    ,17  // _easy20 - rruruurdlulullddd
    ,65  // _easy26 - rurdluldruuuuldrdddllluururulluurrrrrdlulllldlurrrrrddldruurdlddr
    
    ,68  // _breakable8 - dluruuuulluruuluruldlllldlddrrrdlulurdllddrddlurrrrrdrdlurrdlurdlu
    ,45  // _breakable11    - rurdluuldrddddldlddrdldrullllluruuuuuuldrrrru
    ,54  // _breakable10    - dldruuuldrrdluuuurdldlulldldluuurruruullldlurruldlurdl
    ,34  // _breakable4 - rruurururuulldllddrdrulullddddrrrr
    ,28  // _breakable14    - uluulurruldrurrrddllldrulddd
    ,36  // _breakable15    - urrdrdluuldrdrrdrrulddluruururddddlu
    ,24  // _breakable2 - rdluruuruldldlluuurdrdru
    ,28  // _breakable3 - ddldruulldrdrullldddruluuluu
    ,23  // _breakable1 - ldlurdlluurdrdrdrdluurr
    ,46  // _breakable12    - ururrdluldrrdldlllullurululdddrrruuluurrrulddl
    ,33  // _breakable5 - rddrddrdluldrrrrulurdldrulululull
    ,33  // _breakable6 - rdrrdldruuulldrurruurullldddlddld
    ,30  // _breakable7 - rddlurruuuulullddrdddldllulldd
    
    ,23  // _level1 - drdrruulurdluuullllddrr
    ,28  // _level2 - luldrruldllululdddruruururuu
    ,39  // _level3 - rdlurdlldrururddllululldrurululurrrdrdd
    ,40  // _level4 - ruldrdllululurruuuuulldlurrdlurrrddlurrr
    ,48  // _level5 - lurddllldruldruuldlluuluuurdlddrrululurddruluurr
    ,38  // _level6 - llllurdrrruuuluuuuldrdddldlluuuldruluu
    ,23  // _level7 - lldlluururruldddrddllul
    ,60  // _level8 - ulldldruurrrrdddddldlllluldruluurrdrruururuulllllddrrddrdluu
    ,37  // _level9 - urruuuldrddldllllddrdruuuulllddrdrddl
    ,45  // _level10    - ddrulurddruluuruuldruurdldllululullurddlurdrr
    ,43  // _level11    - luluuuurrdrdddldruullulddldlurrrrdluulullul
    ,36  // _level12    - uululdrurdlldrurrrrdddruluulurdddrrd
    ,30  // _level13    - uuuuruulurdrrddrdlddrruruurull
    ,42  // _level14    - uullldldrurulddrddlddrululdrrrruuuldrdluru
    ,35  // _level15    - lldruluulurddruluulurddrurururdlluu
    ,58  // _level16    - llulululddrrddrrruruuuluulldllurdlurdrdrruululldlddlururrd
    ,16  // _level17    - lllulddrruluuull
    ,20  // _level18    - lurddruluuullulurrur
    ,19  // _level19    - lulddrddrdluuluurrd
    ,34  // _trigger3_2 - rrdrdddluruuuurururuuuldrddlddldld
    
    ,42  // _tut4
    ,42  // _tut5
    ,42  // _blocks2    - dlullullurrrulrdllldrruuuulurdrrrdruldruld
    ,80  // _blocks1    - ulldrullrdrulluuuurdllldrdllddrrurluldrrdulluruuudrruullllrrdlululdurdrddddldruu
    ,87  // _blocks4    -  lulddrrudlldddrrururuuullluldddduurulldruuldddruurrrrdddrdlruldrulurddlurullruuullldddl
    ,100  // _blocks5    - ddrddlluluurrululdrddrdrdldlululdlddruuudrdlurdrdrurululuululddrruuldrddrdrdldluruuluuudddrdrdllluul
    ,86  // _blocks6    - lluuurdrullurdrdululdrrdrdrulldurrdlulluldddrurddlldlurrrdulluldrdlurururulddrrdllurdl
};

@interface Level() {
    
    UISwipeGestureRecognizerDirection _direction;
    UISwipeGestureRecognizerDirection _lastDirection;
    
    // this could be an object. in fact this could be a PlayerMovedEvent object
    // then block movements function wouldn't have to recalculate rollingSideways
    int _playerIndex1;
    int _playerIndex2;
    int _prevPlayerIndex1;
    int _prevPlayerIndex2;
    
    // this could be represented by a Level class making this Level class a LevelProcessor!
    // that operates on Level objects
    unsigned char* _lastMoveableState;
    unsigned char* _moveableState;
    unsigned char* _currentState;
    unsigned char _cols;
    int _size;
    NSUInteger _levelNumber;
    BOOL _levelHasBlocks;
    BOOL _levelHasTriggers;
}

@end

@implementation Level

+ (uint)numColsForLevelNumber:(NSUInteger)number {
    return _columns[number];
}

+ (uint)numRowsForLevelNumber:(NSUInteger)number {
    return _rows[number];
}

+ (uint)sizeForLevelNumber:(NSUInteger)number {
    return _sizes[number];
}

+ (unsigned char*)tilesForLevelNumber:(NSUInteger)number {
    return _levels[number];
}

+ (int)moveCounterForLevelNumber:(NSUInteger)number {
    return _moves[number];
}

- (void)winMultiplesFromIndex:(int)index multiple:(int)multiple winAnim:(NSMutableDictionary*)winAnim
{
    // from the current index, fan out
    int left = [self indexOfLeftSiblingForIndex:index];
    int right = [self indexOfRightSiblingForIndex:index];
    int up = [self indexOfUpSiblingForIndex:index];
    int down = [self indexOfDownSiblingForIndex:index];
    
    BOOL moveLeft = NO;
    BOOL moveRight = NO;
    BOOL moveUp = NO;
    BOOL moveDown = NO;
    
    if(_currentState[left] != kEmptyTile) {
        NSNumber* leftNum = [NSNumber numberWithInt:left];
        if([winAnim objectForKey:[leftNum stringValue]] == nil) {
            [winAnim setObject:[NSNumber numberWithInt:multiple+1] forKey:[leftNum stringValue]];
            moveLeft = YES;
        }
    }
    
    if(_currentState[right] != kEmptyTile) {
        NSNumber* rightNum = [NSNumber numberWithInt:right];
        if([winAnim objectForKey:[rightNum stringValue]] == nil) {
            [winAnim setObject:[NSNumber numberWithInt:multiple+1] forKey:[rightNum stringValue]];
            moveRight = YES;
        }
    }
        
    if(_currentState[up] != kEmptyTile) {
        NSNumber* upNum = [NSNumber numberWithInt:up];
        if([winAnim objectForKey:[upNum stringValue]] == nil) {
            [winAnim setObject:[NSNumber numberWithInt:multiple+1] forKey:[upNum stringValue]];
            moveUp = YES;
        }
    }
    
    if(_currentState[down] != kEmptyTile) {
        NSNumber* downNum = [NSNumber numberWithInt:down];
        if([winAnim objectForKey:[downNum stringValue]] == nil) {
            [winAnim setObject:[NSNumber numberWithInt:multiple+1] forKey:[downNum stringValue]];
            moveDown = YES;
        }
    }
    
    if(moveLeft)
        [self winMultiplesFromIndex:left multiple:multiple+1 winAnim:winAnim];
    if(moveRight)
        [self winMultiplesFromIndex:right multiple:multiple+1 winAnim:winAnim];
    if(moveUp)
        [self winMultiplesFromIndex:up multiple:multiple+1 winAnim:winAnim];
    if(moveDown)
        [self winMultiplesFromIndex:down multiple:multiple+1 winAnim:winAnim];
}

- (NSMutableDictionary*)winChainMultipliers {
    
    int winTileIndex = [self indexOfTileType:kWinTile withState:_currentState reverseScan:NO];
    NSMutableDictionary* winAnim = [[NSMutableDictionary alloc]init];
    [self winMultiplesFromIndex:winTileIndex multiple:0 winAnim:winAnim];
    
    return winAnim;
}

- (LevelInfo*)loadLevel:(NSUInteger)number {
    
    _cols = _columns[number];
    _size = _sizes[number];
    
    // these arrays are used to track movement of player, blocks, and any push interactions between them
    _moveableState = malloc(sizeof(unsigned char)* _size);
    _lastMoveableState = malloc(sizeof(unsigned char)* _size);
    
    // current state represents the static board, moveable objects reference this board for interactions
    _currentState = malloc(sizeof(unsigned char) * _size);
    
    // example of high cohesion that causes bug
    // level # has to be set before calling resetBoard
    // TODO: fix
    _levelNumber = number;
    [self resetBoard];
    
    return [self currentLevelInfo];
}

- (LevelInfo*)currentLevelInfo {
    
    LevelInfo* info = [[LevelInfo alloc]init];
    
    NSMutableArray* tiles = [[NSMutableArray alloc]initWithCapacity:_size];
    for(int i = 0; i < _size; ++i)
        [tiles addObject:[NSNumber numberWithInt:_currentState[i]]];
    
    // return all the "static" tiles in the current state array
    info.staticTiles = [tiles copy];
    
    // and the array dimensions so view can render itself
    // # of rows can be determined by size/cols
    info.cols = _cols;
    info.size = _size;
    
    return info;
}

// TODO: refactor into game mode classes that are pushed onto game processor?

- (void)resetBoard {
    
    // copy the original level into current stte
    memcpy(_currentState, _levels[_levelNumber], _size);
    
    // zero out movement
    memset(_moveableState, 0, _size);
    
    // now for each tile in the level, transfer moveable objects to the the moveable array and
    // replace with an open tile
    for(int i = 0; i < _size; ++i) {
        TileType tt = _currentState[i];
        
        if(tt == kPlayerTile) {
            _currentState[i] = kOpenTile;
            _moveableState[i] = kPlayerTile;
            
            // take note of the player index
            _playerIndex1 = i;
            _playerIndex2 = kNullTile; // player always starts vertical
            _prevPlayerIndex1 = kNullTile;
            _prevPlayerIndex2 = kNullTile;
        }
        else if(tt >= kBlockTile1) { // anything greater than block tile 1 is considered a block
            
            // don't short circuit block processing logic
            _levelHasBlocks = YES;
            
            if(tt % 2 == 0) { // blocks fall on even #'s, block triggers on odd #'s
                _currentState[i] = kOpenTile;
                _moveableState[i] = tt;
            }
            else {
                _levelHasTriggers = YES;
            }
        }
    }
    
    // instead of copying current state to last state, we memset last state array to null tile
    // that way, on a level restart, there's a change between previous and current indices
    // for blocks, which triggers move events, although in this case, it's movement to their
    // initial state, which the view can then render
    memset(_lastMoveableState, kNullTile, _size);
}

- (void)restart {
    
    [self resetBoard];
    
    // tirgger the initial state of moveable objects
    // of course, no object movement so pushed objects are both nil
    [self sendLevelEventsAndPushedObjects1:nil andPushedObjects2:nil];
}

- (void)dealloc {
    free(_currentState);
    free(_lastMoveableState);
    free(_moveableState);
}

+ (int)totalNumberOfLevels {
    return sizeof(_levels) / sizeof(_levels[0]);
}

- (int)indexOfLeftSiblingForIndex:(int)index {
    if((index % _cols) == 0)
        return kNullTile;
    return index - 1;
}

- (int)indexOfRightSiblingForIndex:(int)index {
    if((index % _cols) == (_cols - 1))
        return kNullTile;
    return index + 1;
}

- (int)indexOfUpSiblingForIndex:(int)index {
    if(index < _cols)
        return kNullTile;
    return index - _cols;
}

- (int)indexOfDownSiblingForIndex:(int)index {
    if((index + _cols) >= _size)
        return kNullTile;
    return index + _cols;
}

- (int)indexOfSiblingForIndex:(int)index withDirection:(UISwipeGestureRecognizerDirection)direction {
    switch (direction) {
        case UISwipeGestureRecognizerDirectionLeft:
            return [self indexOfLeftSiblingForIndex:index];
        case UISwipeGestureRecognizerDirectionDown:
            return [self indexOfDownSiblingForIndex:index];
        case UISwipeGestureRecognizerDirectionUp:
            return [self indexOfUpSiblingForIndex:index];
        case UISwipeGestureRecognizerDirectionRight:
            return [self indexOfRightSiblingForIndex:index];
    }
    return kNullTile;
}

- (int)indexOfTileType:(TileType)type withState:(unsigned char*)state reverseScan:(BOOL)reverseScan {
    int index = kNullTile;
    if(reverseScan) {
        for(int j = _size -1; j > -1; --j) {
            if(state[j] == type) {
                index = j;
                break;
            }
        }
    }
    else {
        for(int i = 0; i < _size; ++i) {
            if(state[i] == type) {
                index = i;
                break;
            }
        }
    }
    return index;
}

- (void)logState:(unsigned char*)state {
    NSMutableString* str = [[NSMutableString alloc]init];
    for(int i = 0; i < _size; ++i) {
        if((i % ((int)_cols)) == 0) {
            str = [[NSMutableString alloc]init];
        }
        int t = state[i];
        [str appendString:[NSString stringWithFormat:@"%i,",t]];
    }
}

// works by pushing farthest object into empty space first, then working backwards
- (int)swapSiblingWith:(int)index forDirection:(UISwipeGestureRecognizerDirection)direction trackPushedObjectsWithArray:(NSMutableArray*)pushedObjects {
    
    // grab the sibling index and type for the given direction
    int sibIndex = [self indexOfSiblingForIndex:index withDirection:direction];
    int sibType = _moveableState[sibIndex];
    
    if(sibType == 0) { // if there's an empty space
        // any moveable object that is not the player is added to the pushed objects array
        if(pushedObjects != nil && _moveableState[index] != kPlayerTile) {
            [pushedObjects addObject:[NSNumber numberWithInt:_moveableState[index]]];
        }
        // swap, moving the object one space over
        _moveableState[sibIndex] = _moveableState[index];
        _moveableState[index] = sibType;
    }
    else { // another object is blocking us

        // move other object first
        [self swapSiblingWith:sibIndex forDirection:direction trackPushedObjectsWithArray:pushedObjects];
        
        // now try again
        [self swapSiblingWith:index forDirection:direction trackPushedObjectsWithArray:pushedObjects];
    }
    
    return sibIndex; // return the new player index which initiated this call
}

- (void)updatePlayerIndexesForDirection:(UISwipeGestureRecognizerDirection)direction {
    // store previous indices
    _prevPlayerIndex1 = _playerIndex1;
    _prevPlayerIndex2 = _playerIndex2;
    
    // scan/reverse scan for player indices based on direction
    if(direction == UISwipeGestureRecognizerDirectionLeft ||
       direction == UISwipeGestureRecognizerDirectionUp) {
        _playerIndex1 = [self indexOfTileType:kPlayerTile withState:_moveableState reverseScan:NO];
        _playerIndex2 = [self indexOfTileType:kPlayerTile withState:_moveableState reverseScan:YES];
    }
    else if(direction == UISwipeGestureRecognizerDirectionRight ||
            direction == UISwipeGestureRecognizerDirectionDown) {
        _playerIndex1 = [self indexOfTileType:kPlayerTile withState:_moveableState reverseScan:YES];
        _playerIndex2 = [self indexOfTileType:kPlayerTile withState:_moveableState reverseScan:NO];
    }
    
    // if we're standing vertical, null out player index 2
    if(_playerIndex2 == _playerIndex1) {
        _playerIndex2 = kNullTile;
    }
}

- (void)movePlayerInDirection:(UISwipeGestureRecognizerDirection)direction {
    // because scanning is based on direction, playerIndex1 will either be the top/left most index or
    // bottom/right most index
    [self updatePlayerIndexesForDirection:direction];

    NSMutableArray* pushedObjects1 = _levelHasBlocks ? [[NSMutableArray alloc]init] : nil;
    // if the player is rolling sideways, player index 2 may push objects as well
    NSMutableArray* pushedObjects2 = nil; // player may not be rolling sideways, so we don't alloc yet
    
    // move player and any blocks over one tile in given direction
    // if player index 2 is null, pass nil, so pushed objects don't get tracked because
    // the player is moving from vertical to horizontal and we'll be moving player index 1 again shortly
    // which will cause pushed objects to be recalculated
    _playerIndex1 = [self swapSiblingWith:_playerIndex1 forDirection:direction
              trackPushedObjectsWithArray:_playerIndex2 == kNullTile ? nil : pushedObjects1];
    
    if(_playerIndex2 == kNullTile) { // move again, player is going from vertical to horizontal
    
        _playerIndex1 = [self swapSiblingWith:_playerIndex1 forDirection:direction trackPushedObjectsWithArray:pushedObjects1];
        
        // update player index based on direction
        switch(direction) {
            case UISwipeGestureRecognizerDirectionLeft: _playerIndex2 = _playerIndex1+1; break;
            case UISwipeGestureRecognizerDirectionRight: _playerIndex2 = _playerIndex1-1; break;
            case UISwipeGestureRecognizerDirectionUp: _playerIndex2 = _playerIndex1+_cols; break;
            case UISwipeGestureRecognizerDirectionDown: _playerIndex2 = _playerIndex1-_cols; break;
        }
        
        // add player index 2 to moveables
        _moveableState[_playerIndex2] = kPlayerTile;
    }
    else { // we're moving horizontal to vertical
        // if playerIndex2 is inline with direction (not moving sideways), wipe player index 2 as we move vertical
        BOOL isInline = NO;
        switch(direction) {
            case UISwipeGestureRecognizerDirectionLeft: isInline = _playerIndex2 == _playerIndex1+2; break;
            case UISwipeGestureRecognizerDirectionRight: isInline =_playerIndex2 == _playerIndex1-2; break;
            case UISwipeGestureRecognizerDirectionUp: isInline =_playerIndex2 == _playerIndex1+(2*_cols); break;
            case UISwipeGestureRecognizerDirectionDown: isInline =_playerIndex2 == _playerIndex1-(2*_cols); break;
        }
        
        if(isInline) { // wipe player index 2 from moveables
            _moveableState[_playerIndex2] = 0;
            _playerIndex2 = kNullTile;
        }
        else // we're rolling sideways
        {
            // determine if player index 2 pushed any objects
            pushedObjects2 = _levelHasBlocks ? [[NSMutableArray alloc]init] : nil;
            _playerIndex2 = [self swapSiblingWith:_playerIndex2 forDirection:direction
                      trackPushedObjectsWithArray:pushedObjects2];
        }
    }
    
    // player may not have pushed any objects
    // if so, don't send empty arrays to be processed
    if(pushedObjects1.count == 0)
        pushedObjects1 = nil;
    if(pushedObjects2 != nil && pushedObjects2.count == 0)
        pushedObjects2 = nil;

    [self sendLevelEventsAndPushedObjects1:pushedObjects1 andPushedObjects2:pushedObjects2];
}

- (BOOL)isPlayerRollingSideways {
    BOOL rollingSideways = NO;
    if(_playerIndex2 != kNullTile) {
        if(_direction == UISwipeGestureRecognizerDirectionLeft ||
           _direction == UISwipeGestureRecognizerDirectionRight) {
            // if the player direction is left/right and player index 2 is above/below us, we're rolling sideways
            if([self indexOfUpSiblingForIndex:_playerIndex1] == _playerIndex2 ||
               [self indexOfDownSiblingForIndex:_playerIndex1] == _playerIndex2) {
                rollingSideways = YES;
            }
        }
        else if(_direction == UISwipeGestureRecognizerDirectionUp ||
                _direction == UISwipeGestureRecognizerDirectionDown) {
            if([self indexOfLeftSiblingForIndex:_playerIndex1] == _playerIndex2 ||
               [self indexOfRightSiblingForIndex:_playerIndex1] == _playerIndex2) {
                rollingSideways = YES;
            }
        }
    }
    return rollingSideways;
}

- (PlayerMovedEvent*)buildPlayerMovedEvent {
    // this function is called in response to movePlayer: so we're guaranteed player movement
    PlayerMovedEvent* pme = [[PlayerMovedEvent alloc]init];
    pme.tileType = kPlayerTile;
    pme.curPlayerIndex1 = _playerIndex1;
    pme.curPlayerIndex2 = _playerIndex2;
    pme.prevPlayerIndex1 = _prevPlayerIndex1;
    pme.prevPlayerIndex2 = _prevPlayerIndex2;
    pme.rollingSideways = [self isPlayerRollingSideways];
    
    if(pme.rollingSideways) {
        pme.prevChainMultiplier1 = 0;
        pme.prevChainMultiplier2 = 0;
        pme.curChainMultiplier1 = 1;
        pme.curChainMultiplier2 = 1;
    }
    else {
        // are we moving vertical to horizontal?
        if(_prevPlayerIndex2 == kNullTile) {
            pme.prevChainMultiplier1 = 0;
            pme.prevChainMultiplier2 = 0;
            
            // when moving vertical to horizontal, player index 1 gets pushed twice
            // it will always be the farthest index
            pme.curChainMultiplier1 = 2;
            pme.curChainMultiplier2 = 1;
        }
        else { // we're moving horizontal to vertical
            
            if(_direction == UISwipeGestureRecognizerDirectionLeft ||
               _direction == UISwipeGestureRecognizerDirectionUp) {
                // scanning is based on direction and places player index 1 as either the top-left or bottom-right most index
                if(_lastDirection == UISwipeGestureRecognizerDirectionRight ||
                   _lastDirection == UISwipeGestureRecognizerDirectionDown) {
                    pme.prevChainMultiplier1 = 0;
                    pme.prevChainMultiplier2 = 1;
                }
                else {
                    pme.prevChainMultiplier1 = 1;
                    pme.prevChainMultiplier2 = 0;
                }
            }
            else {
                if(_lastDirection == UISwipeGestureRecognizerDirectionLeft ||
                   _lastDirection == UISwipeGestureRecognizerDirectionUp) {
                    pme.prevChainMultiplier1 = 0;
                    pme.prevChainMultiplier2 = 1;
                }
                else {
                    pme.prevChainMultiplier1 = 1;
                    pme.prevChainMultiplier2 = 0;
                }
            }
            
            pme.curChainMultiplier1 = 2;
            pme.curChainMultiplier2 = 0;
        }
    }
    
    // check for player movement secondary states
    // is the player out of bounds?
    if(_currentState[_playerIndex1] == kEmptyTile ||
       (_playerIndex2 != kNullTile && _currentState[_playerIndex2] == kEmptyTile)) {
        
        pme.secondaryEventType = kLevelEventOutOfBounds;
    }
    // did the player stand vertically on a breakable tile? if so, they broke it
    else if(_currentState[_playerIndex1] == kBreakableTile && _playerIndex2 == kNullTile) {
        
        pme.secondaryEventType = kLevelEventBrokeTile;
    }
    // did the player stand vertically on the win tile? if so, they won!
    else if(_currentState[_playerIndex1] == kWinTile && _playerIndex2 == kNullTile) { // if player index 2 is null, they're standing vertical
        
        pme.secondaryEventType = kLevelEventPlayerWon;
    }
    return pme;
}

- (int)calculateChainMultiplierForTileType:(TileType)tileType inPushedObjects:(NSMutableArray*)pushedObjects {
    int chainMultiplier = 0;
    // search array for indices matching the tile type
    NSIndexSet* indexes = [pushedObjects indexesOfObjectsPassingTest:
                           ^BOOL(id obj, NSUInteger idx, BOOL* stop) {
                               if([obj intValue] == tileType) {
                                   *stop = YES;
                                   return YES;
                               }
                               return NO;
                           }];
    
    if(indexes.count > 0) {
        // +1 to offset it from array index 0, multiplying by 1 has no effect but 0 does
        // +1 to offset it from player index 1
        chainMultiplier = [indexes firstIndex] + 2;
    }
    
    if(![self isPlayerRollingSideways]) {
        // player is not rolling sideways, but moving from vertical to horizontal
        // +1 to offset it from player index 2
        chainMultiplier += 1;
    }
    return chainMultiplier;
}

- (NSMutableArray*)buildBlockMovedEventsWithPushedObjects1:(NSMutableArray*)pushedObjects1 andPushedObjects2:(NSMutableArray*)pushedObjects2 {
    
    NSMutableArray* blockMovements = [[NSMutableArray alloc]init];
    
    // pushed objects are in order from farthest object (first index) to closest object (last index)
    // reversing the order makes it easier to calculate the chain multiple
    if(pushedObjects1 != nil)
        pushedObjects1 = [NSMutableArray arrayWithArray:[[pushedObjects1 reverseObjectEnumerator] allObjects]];
    if(pushedObjects2 != nil)
        pushedObjects2 = [NSMutableArray arrayWithArray:[[pushedObjects2 reverseObjectEnumerator] allObjects]];
    
    // iterate over each index in the moveable objects array looking for blocks that have moved since last state
    for(int i = 0; i < _size; ++i) {
        TileType tt = _moveableState[i];
        if(tt >= kBlockTile1) {
            if(_lastMoveableState[i] != _moveableState[i]) {
                
                BlockMovedEvent* bme = [[BlockMovedEvent alloc]init];
                [blockMovements addObject:bme];
                
                bme.tileType = tt;
                bme.curIndex = i;
                bme.prevIndex = [self indexOfTileType:tt withState:_lastMoveableState reverseScan:NO];
                
                // convenience flag used by view to avoid animation stomping
                bme.isPrevIndexEmpty = _moveableState[bme.prevIndex] == 0;
                
                if(pushedObjects1 != nil) {
                    // check pushed objects 1 for index of this block type
                    bme.chainMultiplier = [self calculateChainMultiplierForTileType:tt inPushedObjects:pushedObjects1];
                }
                
                // block may not be in pushed objects 1, in which case, the chain multiplier will still be zero
                // a block can only be pushed by either player index 1 or player index 2 but not both, so
                // if chain multiplier is zero, pushed objects 2 may contain an index for this block type
                if(bme.chainMultiplier == 0 && pushedObjects2 != nil) {
                    bme.chainMultiplier = [self calculateChainMultiplierForTileType:tt inPushedObjects:pushedObjects2];
                }
                
                // has this block moved out of bounds?
                if(_currentState[i] == kEmptyTile) {
                    bme.secondaryEventType = kLevelEventOutOfBounds;
                }
                
                // has this block landed on a corresponding trigger?
                // tt+1 indicates a corresponding trigger
                if(_levelHasTriggers && _currentState[i] == (tt+1)) {
                    bme.secondaryEventType = kLevelEventBlockUnlocked;
                    
                    // this is logic that ideally shouldn't be in send events...?
                    // because the block is unlocked, wipe both the block and its corresponding trigger from the board
                    bme.newOriginalTileType = kOpenTile;
                    _currentState[i] = kOpenTile;
                    _moveableState[i] = 0;
                }
            }
        }
    }
    
    return blockMovements;
}

- (WinTileUnlockedEvent*)checkForWinTileUnlockedEvent:(NSMutableArray*)blockMovements {
    WinTileUnlockedEvent* wtue = nil;
    
    NSIndexSet* indexes = [blockMovements indexesOfObjectsPassingTest:
                           ^BOOL(id obj, NSUInteger idx, BOOL* stop) {
                               BlockMovedEvent* bme = (BlockMovedEvent*)obj;
                               if(bme.secondaryEventType == kLevelEventBlockUnlocked) {
                                   *stop = YES;
                                   return YES;
                               }
                               return NO;
                           }];
    
    if(indexes.count > 0) {
        // any more triggers on the map? if not, show unlocked win tile!
        BOOL triggersRemain = NO;
        for(int i = 0; i < _size; ++i) {
            if(_currentState[i] >= kBlockTile1) {
                if(_currentState[i] % 2 != 0) {
                    triggersRemain = YES; // we found a trigger
                    break;
                }
            }
        }
        if(!triggersRemain) {
            // no triggers remain, build win unlocked event
            wtue = [[WinTileUnlockedEvent alloc]init];
            wtue.index = [self indexOfTileType:kWinTileLocked withState:_currentState reverseScan:NO];
            _currentState[wtue.index] = kWinTile; // update index to win tile type
        }
    }

    return wtue;
}

// check for interactions and dispatch events
- (void)sendLevelEventsAndPushedObjects1:(NSMutableArray*)pushedObjects1 andPushedObjects2:(NSMutableArray*)pushedObjects2
{
    NSMutableDictionary* events = [[NSMutableDictionary alloc]init];
    [events setObject:[self buildPlayerMovedEvent] forKey:kPlayerMovedEventKey];
    
    // instead of a flag, it would be nice if game mode processor class could add this chunk of block processor code? stack for game modes?
    if(_levelHasBlocks) {
        // get a list of potential block movements (represented by pushed objects arrays)
        NSMutableArray* blockMovements = [self buildBlockMovedEventsWithPushedObjects1:pushedObjects1 andPushedObjects2:pushedObjects2];
        [events setObject:blockMovements forKey:kBlockMovementsEventKey];
        
        // if the level has triggers, we need to check for win tile unlocked events
        if(_levelHasTriggers) {
            WinTileUnlockedEvent* wtue = [self checkForWinTileUnlockedEvent:blockMovements];
            if(wtue != nil) {
                [events setObject:wtue forKey:kWinTileUnlockedEventKey];
            }
        }
    }
    
    // finally, post the list of events for the view to process
    [[NSNotificationCenter defaultCenter]postNotificationName:@"levelEvents" object:events];
}

- (void)movePlayer:(UISwipeGestureRecognizerDirection)direction
{
    _lastDirection = _direction;
    _direction = direction;
    
    memcpy(_lastMoveableState,  // dest
           _moveableState,      // src
           _size);              // len
   
    [self movePlayerInDirection:direction];
}

@end
